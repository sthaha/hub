// Code generated by goa v3.1.1, DO NOT EDIT.
//
// resource endpoints
//
// Command:
// $ goa gen github.com/tektoncd/hub/api/design

package resource

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "resource" service endpoints.
type Endpoints struct {
	All          goa.Endpoint
	AllVersions  goa.Endpoint
	GetRating    goa.Endpoint
	UpdateRating goa.Endpoint
}

// NewEndpoints wraps the methods of the "resource" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		All:          NewAllEndpoint(s),
		AllVersions:  NewAllVersionsEndpoint(s),
		GetRating:    NewGetRatingEndpoint(s),
		UpdateRating: NewUpdateRatingEndpoint(s),
	}
}

// Use applies the given middleware to all the "resource" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.All = m(e.All)
	e.AllVersions = m(e.AllVersions)
	e.GetRating = m(e.GetRating)
	e.UpdateRating = m(e.UpdateRating)
}

// NewAllEndpoint returns an endpoint function that calls the method "All" of
// service "resource".
func NewAllEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*AllPayload)
		res, err := s.All(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedResourceCollection(res, "default")
		return vres, nil
	}
}

// NewAllVersionsEndpoint returns an endpoint function that calls the method
// "AllVersions" of service "resource".
func NewAllVersionsEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*AllVersionsPayload)
		return s.AllVersions(ctx, p)
	}
}

// NewGetRatingEndpoint returns an endpoint function that calls the method
// "GetRating" of service "resource".
func NewGetRatingEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*GetRatingPayload)
		return s.GetRating(ctx, p)
	}
}

// NewUpdateRatingEndpoint returns an endpoint function that calls the method
// "UpdateRating" of service "resource".
func NewUpdateRatingEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*UpdateRatingPayload)
		return nil, s.UpdateRating(ctx, p)
	}
}
