// Code generated by goa v3.1.1, DO NOT EDIT.
//
// resource views
//
// Command:
// $ goa gen github.com/tektoncd/hub/api/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// ResourceCollection is the viewed result type that is projected based on a
// view.
type ResourceCollection struct {
	// Type to project
	Projected ResourceCollectionView
	// View to render
	View string
}

// ResourceCollectionView is a type that runs validations on a projected type.
type ResourceCollectionView []*ResourceView

// ResourceView is a type that runs validations on a projected type.
type ResourceView struct {
	// ID is the unique id of the resource
	ID *uint
	// Name of the resource
	Name *string
	// Type of the resource
	Type *string
	// Catalog to which resource belongs to
	Catalog *CatalogView
	// Description of the resource
	Description *string
	// Different Versions of the resource
	Versions []*ResourceVersionView
	// Tags associated to the resource
	Tags []*Tag
	// Rating of resource
	Rating *float64
	// TimeStamp the resource last updated at
	LastUpdatedAt *string
}

// CatalogView is a type that runs validations on a projected type.
type CatalogView struct {
	// ID is the unique id of the catalog
	ID *uint
	// Type of catalog
	Type *string
}

// ResourceVersionView is a type that runs validations on a projected type.
type ResourceVersionView struct {
	// ID is the unique id of the version
	ID *uint
	// Version of resource
	Version *string
}

// Tag is a type that runs validations on a projected type.
type Tag struct {
	// ID is the unique id of the tag
	ID *uint
	// Name of the tag
	Name *string
}

var (
	// ResourceCollectionMap is a map of attribute names in result type
	// ResourceCollection indexed by view name.
	ResourceCollectionMap = map[string][]string{
		"default": []string{
			"id",
			"name",
			"type",
			"catalog",
			"description",
			"versions",
			"tags",
			"rating",
			"last_updated_at",
		},
	}
	// ResourceMap is a map of attribute names in result type Resource indexed by
	// view name.
	ResourceMap = map[string][]string{
		"default": []string{
			"id",
			"name",
			"type",
			"catalog",
			"description",
			"versions",
			"tags",
			"rating",
			"last_updated_at",
		},
	}
)

// ValidateResourceCollection runs the validations defined on the viewed result
// type ResourceCollection.
func ValidateResourceCollection(result ResourceCollection) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateResourceCollectionView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateResourceCollectionView runs the validations defined on
// ResourceCollectionView using the "default" view.
func ValidateResourceCollectionView(result ResourceCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateResourceView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateResourceView runs the validations defined on ResourceView using the
// "default" view.
func ValidateResourceView(result *ResourceView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Catalog == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("catalog", "result"))
	}
	if result.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "result"))
	}
	if result.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "result"))
	}
	if result.Versions == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("versions", "result"))
	}
	if result.Tags == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("tags", "result"))
	}
	if result.Rating == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("rating", "result"))
	}
	if result.LastUpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("last_updated_at", "result"))
	}
	if result.Catalog != nil {
		if err2 := ValidateCatalogView(result.Catalog); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	for _, e := range result.Versions {
		if e != nil {
			if err2 := ValidateResourceVersionView(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, e := range result.Tags {
		if e != nil {
			if err2 := ValidateTag(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if result.Rating != nil {
		if *result.Rating < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("result.rating", *result.Rating, 0, true))
		}
	}
	if result.Rating != nil {
		if *result.Rating > 5 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("result.rating", *result.Rating, 5, false))
		}
	}
	return
}

// ValidateCatalogView runs the validations defined on CatalogView.
func ValidateCatalogView(result *CatalogView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "result"))
	}
	return
}

// ValidateResourceVersionView runs the validations defined on
// ResourceVersionView.
func ValidateResourceVersionView(result *ResourceVersionView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Version == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("version", "result"))
	}
	return
}

// ValidateTag runs the validations defined on Tag.
func ValidateTag(result *Tag) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	return
}
