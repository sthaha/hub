// Code generated by goa v3.1.1, DO NOT EDIT.
//
// resource service
//
// Command:
// $ goa gen github.com/tektoncd/hub/api/design

package resource

import (
	"context"

	resourceviews "github.com/tektoncd/hub/api/gen/resource/views"
)

// The resource service gives resource details
type Service interface {
	// Get all tasks and pipelines.
	All(context.Context, *AllPayload) (res ResourceCollection, err error)
	// Get all versions of a resource
	AllVersions(context.Context, *AllVersionsPayload) (res []*Resource, err error)
	// Get User's rating of a resource
	GetRating(context.Context, *GetRatingPayload) (res *ResourceRating, err error)
	// Update User's rating of a resource
	UpdateRating(context.Context, *UpdateRatingPayload) (err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "resource"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [4]string{"All", "AllVersions", "GetRating", "UpdateRating"}

// AllPayload is the payload type of the resource service All method.
type AllPayload struct {
	// Number of Resource to fetch
	Limit uint
}

// ResourceCollection is the result type of the resource service All method.
type ResourceCollection []*Resource

// AllVersionsPayload is the payload type of the resource service AllVersions
// method.
type AllVersionsPayload struct {
	// Id of the Resource
	ResourceID *uint
}

// GetRatingPayload is the payload type of the resource service GetRating
// method.
type GetRatingPayload struct {
	// Id of the Resource
	ResourceID uint
}

// ResourceRating is the result type of the resource service GetRating method.
type ResourceRating struct {
	// Rating of the resource
	Rating uint
}

// UpdateRatingPayload is the payload type of the resource service UpdateRating
// method.
type UpdateRatingPayload struct {
	// Rating of resource to be updated
	Rating uint
	// Id of the Resource
	ResourceID uint
}

// Describes a resource retrieved from catalog
type Resource struct {
	// ID is the unique id of the resource
	ID uint
	// Name of the resource
	Name string
	// Type of the resource
	Type string
	// Catalog to which resource belongs to
	Catalog *Catalog
	// Description of the resource
	Description string
	// Different Versions of the resource
	Versions []*ResourceVersion
	// Tags associated to the resource
	Tags []*Tag
	// Rating of resource
	Rating float64
	// TimeStamp the resource last updated at
	LastUpdatedAt string
}

type Catalog struct {
	// ID is the unique id of the catalog
	ID uint
	// Type of catalog
	Type string
}

type ResourceVersion struct {
	// ID is the unique id of the version
	ID uint
	// Version of resource
	Version string
}

type Tag struct {
	// ID is the unique id of the tag
	ID uint
	// Name of the tag
	Name string
}

// NewResourceCollection initializes result type ResourceCollection from viewed
// result type ResourceCollection.
func NewResourceCollection(vres resourceviews.ResourceCollection) ResourceCollection {
	return newResourceCollection(vres.Projected)
}

// NewViewedResourceCollection initializes viewed result type
// ResourceCollection from result type ResourceCollection using the given view.
func NewViewedResourceCollection(res ResourceCollection, view string) resourceviews.ResourceCollection {
	p := newResourceCollectionView(res)
	return resourceviews.ResourceCollection{Projected: p, View: "default"}
}

// newResourceCollection converts projected type ResourceCollection to service
// type ResourceCollection.
func newResourceCollection(vres resourceviews.ResourceCollectionView) ResourceCollection {
	res := make(ResourceCollection, len(vres))
	for i, n := range vres {
		res[i] = newResource(n)
	}
	return res
}

// newResourceCollectionView projects result type ResourceCollection to
// projected type ResourceCollectionView using the "default" view.
func newResourceCollectionView(res ResourceCollection) resourceviews.ResourceCollectionView {
	vres := make(resourceviews.ResourceCollectionView, len(res))
	for i, n := range res {
		vres[i] = newResourceView(n)
	}
	return vres
}

// newResource converts projected type Resource to service type Resource.
func newResource(vres *resourceviews.ResourceView) *Resource {
	res := &Resource{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	if vres.Type != nil {
		res.Type = *vres.Type
	}
	if vres.Description != nil {
		res.Description = *vres.Description
	}
	if vres.Rating != nil {
		res.Rating = *vres.Rating
	}
	if vres.LastUpdatedAt != nil {
		res.LastUpdatedAt = *vres.LastUpdatedAt
	}
	if vres.Catalog != nil {
		res.Catalog = transformResourceviewsCatalogViewToCatalog(vres.Catalog)
	}
	if vres.Versions != nil {
		res.Versions = make([]*ResourceVersion, len(vres.Versions))
		for i, val := range vres.Versions {
			res.Versions[i] = transformResourceviewsResourceVersionViewToResourceVersion(val)
		}
	}
	if vres.Tags != nil {
		res.Tags = make([]*Tag, len(vres.Tags))
		for i, val := range vres.Tags {
			res.Tags[i] = transformResourceviewsTagToTag(val)
		}
	}
	return res
}

// newResourceView projects result type Resource to projected type ResourceView
// using the "default" view.
func newResourceView(res *Resource) *resourceviews.ResourceView {
	vres := &resourceviews.ResourceView{
		ID:            &res.ID,
		Name:          &res.Name,
		Type:          &res.Type,
		Description:   &res.Description,
		Rating:        &res.Rating,
		LastUpdatedAt: &res.LastUpdatedAt,
	}
	if res.Catalog != nil {
		vres.Catalog = transformCatalogToResourceviewsCatalogView(res.Catalog)
	}
	if res.Versions != nil {
		vres.Versions = make([]*resourceviews.ResourceVersionView, len(res.Versions))
		for i, val := range res.Versions {
			vres.Versions[i] = transformResourceVersionToResourceviewsResourceVersionView(val)
		}
	}
	if res.Tags != nil {
		vres.Tags = make([]*resourceviews.Tag, len(res.Tags))
		for i, val := range res.Tags {
			vres.Tags[i] = transformTagToResourceviewsTag(val)
		}
	}
	return vres
}

// transformResourceviewsCatalogViewToCatalog builds a value of type *Catalog
// from a value of type *resourceviews.CatalogView.
func transformResourceviewsCatalogViewToCatalog(v *resourceviews.CatalogView) *Catalog {
	if v == nil {
		return nil
	}
	res := &Catalog{
		ID:   *v.ID,
		Type: *v.Type,
	}

	return res
}

// transformResourceviewsResourceVersionViewToResourceVersion builds a value of
// type *ResourceVersion from a value of type
// *resourceviews.ResourceVersionView.
func transformResourceviewsResourceVersionViewToResourceVersion(v *resourceviews.ResourceVersionView) *ResourceVersion {
	if v == nil {
		return nil
	}
	res := &ResourceVersion{
		ID:      *v.ID,
		Version: *v.Version,
	}

	return res
}

// transformResourceviewsTagToTag builds a value of type *Tag from a value of
// type *resourceviews.Tag.
func transformResourceviewsTagToTag(v *resourceviews.Tag) *Tag {
	if v == nil {
		return nil
	}
	res := &Tag{
		ID:   *v.ID,
		Name: *v.Name,
	}

	return res
}

// transformCatalogToResourceviewsCatalogView builds a value of type
// *resourceviews.CatalogView from a value of type *Catalog.
func transformCatalogToResourceviewsCatalogView(v *Catalog) *resourceviews.CatalogView {
	res := &resourceviews.CatalogView{
		ID:   &v.ID,
		Type: &v.Type,
	}

	return res
}

// transformResourceVersionToResourceviewsResourceVersionView builds a value of
// type *resourceviews.ResourceVersionView from a value of type
// *ResourceVersion.
func transformResourceVersionToResourceviewsResourceVersionView(v *ResourceVersion) *resourceviews.ResourceVersionView {
	res := &resourceviews.ResourceVersionView{
		ID:      &v.ID,
		Version: &v.Version,
	}

	return res
}

// transformTagToResourceviewsTag builds a value of type *resourceviews.Tag
// from a value of type *Tag.
func transformTagToResourceviewsTag(v *Tag) *resourceviews.Tag {
	res := &resourceviews.Tag{
		ID:   &v.ID,
		Name: &v.Name,
	}

	return res
}
