// Code generated by goa v3.1.1, DO NOT EDIT.
//
// resource HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/tektoncd/hub/api/design

package client

import (
	"bytes"
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"

	resource "github.com/tektoncd/hub/api/gen/resource"
	resourceviews "github.com/tektoncd/hub/api/gen/resource/views"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// BuildAllRequest instantiates a HTTP request object with method and path set
// to call the "resource" service "All" endpoint
func (c *Client) BuildAllRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AllResourcePath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("resource", "All", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeAllRequest returns an encoder for requests sent to the resource All
// server.
func EncodeAllRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*resource.AllPayload)
		if !ok {
			return goahttp.ErrInvalidType("resource", "All", "*resource.AllPayload", v)
		}
		values := req.URL.Query()
		values.Add("limit", fmt.Sprintf("%v", p.Limit))
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeAllResponse returns a decoder for responses returned by the resource
// All endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeAllResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body AllResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("resource", "All", err)
			}
			p := NewAllResourceCollectionOK(body)
			view := "default"
			vres := resourceviews.ResourceCollection{Projected: p, View: view}
			if err = resourceviews.ValidateResourceCollection(vres); err != nil {
				return nil, goahttp.ErrValidationError("resource", "All", err)
			}
			res := resource.NewResourceCollection(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("resource", "All", resp.StatusCode, string(body))
		}
	}
}

// BuildAllVersionsRequest instantiates a HTTP request object with method and
// path set to call the "resource" service "AllVersions" endpoint
func (c *Client) BuildAllVersionsRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		resourceID uint
	)
	{
		p, ok := v.(*resource.AllVersionsPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("resource", "AllVersions", "*resource.AllVersionsPayload", v)
		}
		if p.ResourceID != nil {
			resourceID = *p.ResourceID
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AllVersionsResourcePath(resourceID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("resource", "AllVersions", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeAllVersionsResponse returns a decoder for responses returned by the
// resource AllVersions endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeAllVersionsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body AllVersionsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("resource", "AllVersions", err)
			}
			for _, e := range body {
				if e != nil {
					if err2 := ValidateResourceResponse(e); err2 != nil {
						err = goa.MergeErrors(err, err2)
					}
				}
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("resource", "AllVersions", err)
			}
			res := NewAllVersionsResourceOK(body)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("resource", "AllVersions", resp.StatusCode, string(body))
		}
	}
}

// BuildGetRatingRequest instantiates a HTTP request object with method and
// path set to call the "resource" service "GetRating" endpoint
func (c *Client) BuildGetRatingRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		resourceID uint
	)
	{
		p, ok := v.(*resource.GetRatingPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("resource", "GetRating", "*resource.GetRatingPayload", v)
		}
		resourceID = p.ResourceID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetRatingResourcePath(resourceID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("resource", "GetRating", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetRatingResponse returns a decoder for responses returned by the
// resource GetRating endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeGetRatingResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetRatingResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("resource", "GetRating", err)
			}
			err = ValidateGetRatingResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("resource", "GetRating", err)
			}
			res := NewGetRatingResourceRatingOK(&body)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("resource", "GetRating", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateRatingRequest instantiates a HTTP request object with method and
// path set to call the "resource" service "UpdateRating" endpoint
func (c *Client) BuildUpdateRatingRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		resourceID uint
	)
	{
		p, ok := v.(*resource.UpdateRatingPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("resource", "UpdateRating", "*resource.UpdateRatingPayload", v)
		}
		resourceID = p.ResourceID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateRatingResourcePath(resourceID)}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("resource", "UpdateRating", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateRatingRequest returns an encoder for requests sent to the
// resource UpdateRating server.
func EncodeUpdateRatingRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*resource.UpdateRatingPayload)
		if !ok {
			return goahttp.ErrInvalidType("resource", "UpdateRating", "*resource.UpdateRatingPayload", v)
		}
		body := NewUpdateRatingRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("resource", "UpdateRating", err)
		}
		return nil
	}
}

// DecodeUpdateRatingResponse returns a decoder for responses returned by the
// resource UpdateRating endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeUpdateRatingResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("resource", "UpdateRating", resp.StatusCode, string(body))
		}
	}
}

// unmarshalResourceResponseToResourceviewsResourceView builds a value of type
// *resourceviews.ResourceView from a value of type *ResourceResponse.
func unmarshalResourceResponseToResourceviewsResourceView(v *ResourceResponse) *resourceviews.ResourceView {
	res := &resourceviews.ResourceView{
		ID:            v.ID,
		Name:          v.Name,
		Type:          v.Type,
		Description:   v.Description,
		Rating:        v.Rating,
		LastUpdatedAt: v.LastUpdatedAt,
	}
	res.Catalog = unmarshalCatalogResponseToResourceviewsCatalogView(v.Catalog)
	res.Versions = make([]*resourceviews.ResourceVersionView, len(v.Versions))
	for i, val := range v.Versions {
		res.Versions[i] = unmarshalResourceVersionResponseToResourceviewsResourceVersionView(val)
	}
	res.Tags = make([]*resourceviews.Tag, len(v.Tags))
	for i, val := range v.Tags {
		res.Tags[i] = unmarshalTagToResourceviewsTag(val)
	}

	return res
}

// unmarshalCatalogResponseToResourceviewsCatalogView builds a value of type
// *resourceviews.CatalogView from a value of type *CatalogResponse.
func unmarshalCatalogResponseToResourceviewsCatalogView(v *CatalogResponse) *resourceviews.CatalogView {
	res := &resourceviews.CatalogView{
		ID:   v.ID,
		Type: v.Type,
	}

	return res
}

// unmarshalResourceVersionResponseToResourceviewsResourceVersionView builds a
// value of type *resourceviews.ResourceVersionView from a value of type
// *ResourceVersionResponse.
func unmarshalResourceVersionResponseToResourceviewsResourceVersionView(v *ResourceVersionResponse) *resourceviews.ResourceVersionView {
	res := &resourceviews.ResourceVersionView{
		ID:      v.ID,
		Version: v.Version,
	}

	return res
}

// unmarshalTagToResourceviewsTag builds a value of type *resourceviews.Tag
// from a value of type *Tag.
func unmarshalTagToResourceviewsTag(v *Tag) *resourceviews.Tag {
	res := &resourceviews.Tag{
		ID:   v.ID,
		Name: v.Name,
	}

	return res
}

// unmarshalResourceResponseToResourceResource builds a value of type
// *resource.Resource from a value of type *ResourceResponse.
func unmarshalResourceResponseToResourceResource(v *ResourceResponse) *resource.Resource {
	res := &resource.Resource{
		ID:            *v.ID,
		Name:          *v.Name,
		Type:          *v.Type,
		Description:   *v.Description,
		Rating:        *v.Rating,
		LastUpdatedAt: *v.LastUpdatedAt,
	}
	res.Catalog = unmarshalCatalogResponseToResourceCatalog(v.Catalog)
	res.Versions = make([]*resource.ResourceVersion, len(v.Versions))
	for i, val := range v.Versions {
		res.Versions[i] = unmarshalResourceVersionResponseToResourceResourceVersion(val)
	}
	res.Tags = make([]*resource.Tag, len(v.Tags))
	for i, val := range v.Tags {
		res.Tags[i] = unmarshalTagToResourceTag(val)
	}

	return res
}

// unmarshalCatalogResponseToResourceCatalog builds a value of type
// *resource.Catalog from a value of type *CatalogResponse.
func unmarshalCatalogResponseToResourceCatalog(v *CatalogResponse) *resource.Catalog {
	res := &resource.Catalog{
		ID:   *v.ID,
		Type: *v.Type,
	}

	return res
}

// unmarshalResourceVersionResponseToResourceResourceVersion builds a value of
// type *resource.ResourceVersion from a value of type *ResourceVersionResponse.
func unmarshalResourceVersionResponseToResourceResourceVersion(v *ResourceVersionResponse) *resource.ResourceVersion {
	res := &resource.ResourceVersion{
		ID:      *v.ID,
		Version: *v.Version,
	}

	return res
}

// unmarshalTagToResourceTag builds a value of type *resource.Tag from a value
// of type *Tag.
func unmarshalTagToResourceTag(v *Tag) *resource.Tag {
	res := &resource.Tag{
		ID:   *v.ID,
		Name: *v.Name,
	}

	return res
}
