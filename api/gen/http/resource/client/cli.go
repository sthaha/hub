// Code generated by goa v3.1.1, DO NOT EDIT.
//
// resource HTTP client CLI support package
//
// Command:
// $ goa gen github.com/tektoncd/hub/api/design

package client

import (
	"encoding/json"
	"fmt"
	"strconv"

	resource "github.com/tektoncd/hub/api/gen/resource"
)

// BuildAllPayload builds the payload for the resource All endpoint from CLI
// flags.
func BuildAllPayload(resourceAllLimit string) (*resource.AllPayload, error) {
	var err error
	var limit uint
	{
		if resourceAllLimit != "" {
			var v uint64
			v, err = strconv.ParseUint(resourceAllLimit, 10, 64)
			limit = uint(v)
			if err != nil {
				return nil, fmt.Errorf("invalid value for limit, must be UINT")
			}
		}
	}
	v := &resource.AllPayload{}
	v.Limit = limit

	return v, nil
}

// BuildAllVersionsPayload builds the payload for the resource AllVersions
// endpoint from CLI flags.
func BuildAllVersionsPayload(resourceAllVersionsResourceID string) (*resource.AllVersionsPayload, error) {
	var err error
	var resourceID uint
	{
		var v uint64
		v, err = strconv.ParseUint(resourceAllVersionsResourceID, 10, 64)
		resourceID = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for resourceID, must be UINT")
		}
	}
	v := &resource.AllVersionsPayload{}
	v.ResourceID = &resourceID

	return v, nil
}

// BuildGetRatingPayload builds the payload for the resource GetRating endpoint
// from CLI flags.
func BuildGetRatingPayload(resourceGetRatingResourceID string) (*resource.GetRatingPayload, error) {
	var err error
	var resourceID uint
	{
		var v uint64
		v, err = strconv.ParseUint(resourceGetRatingResourceID, 10, 64)
		resourceID = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for resourceID, must be UINT")
		}
	}
	v := &resource.GetRatingPayload{}
	v.ResourceID = resourceID

	return v, nil
}

// BuildUpdateRatingPayload builds the payload for the resource UpdateRating
// endpoint from CLI flags.
func BuildUpdateRatingPayload(resourceUpdateRatingBody string, resourceUpdateRatingResourceID string) (*resource.UpdateRatingPayload, error) {
	var err error
	var body UpdateRatingRequestBody
	{
		err = json.Unmarshal([]byte(resourceUpdateRatingBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"rating\": 364697698949290656\n   }'")
		}
	}
	var resourceID uint
	{
		var v uint64
		v, err = strconv.ParseUint(resourceUpdateRatingResourceID, 10, 64)
		resourceID = uint(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for resourceID, must be UINT")
		}
	}
	v := &resource.UpdateRatingPayload{
		Rating: body.Rating,
	}
	v.ResourceID = resourceID

	return v, nil
}
