// Code generated by goa v3.1.1, DO NOT EDIT.
//
// resource HTTP client types
//
// Command:
// $ goa gen github.com/tektoncd/hub/api/design

package client

import (
	resource "github.com/tektoncd/hub/api/gen/resource"
	resourceviews "github.com/tektoncd/hub/api/gen/resource/views"
	goa "goa.design/goa/v3/pkg"
)

// UpdateRatingRequestBody is the type of the "resource" service "UpdateRating"
// endpoint HTTP request body.
type UpdateRatingRequestBody struct {
	// Rating of resource to be updated
	Rating uint `form:"rating" json:"rating" xml:"rating"`
}

// AllResponseBody is the type of the "resource" service "All" endpoint HTTP
// response body.
type AllResponseBody []*ResourceResponse

// AllVersionsResponseBody is the type of the "resource" service "AllVersions"
// endpoint HTTP response body.
type AllVersionsResponseBody []*ResourceResponse

// GetRatingResponseBody is the type of the "resource" service "GetRating"
// endpoint HTTP response body.
type GetRatingResponseBody struct {
	// Rating of the resource
	Rating *uint `form:"rating,omitempty" json:"rating,omitempty" xml:"rating,omitempty"`
}

// ResourceResponse is used to define fields on response body types.
type ResourceResponse struct {
	// ID is the unique id of the resource
	ID *uint `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of the resource
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Type of the resource
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// Catalog to which resource belongs to
	Catalog *CatalogResponse `form:"catalog,omitempty" json:"catalog,omitempty" xml:"catalog,omitempty"`
	// Description of the resource
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Different Versions of the resource
	Versions []*ResourceVersionResponse `form:"versions,omitempty" json:"versions,omitempty" xml:"versions,omitempty"`
	// Tags associated to the resource
	Tags []*ResourceTagResponse `form:"tags,omitempty" json:"tags,omitempty" xml:"tags,omitempty"`
	// Rating of resource
	Rating *float64 `form:"rating,omitempty" json:"rating,omitempty" xml:"rating,omitempty"`
	// TimeStamp the resource last updated at
	LastUpdatedAt *string `form:"last_updated_at,omitempty" json:"last_updated_at,omitempty" xml:"last_updated_at,omitempty"`
}

// CatalogResponse is used to define fields on response body types.
type CatalogResponse struct {
	// ID is the unique id of the catalog
	ID *uint `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Type of catalog
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
}

// ResourceVersionResponse is used to define fields on response body types.
type ResourceVersionResponse struct {
	// ID is the unique id of the version
	ID *uint `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Version of resource
	Version *string `form:"version,omitempty" json:"version,omitempty" xml:"version,omitempty"`
}

// ResourceTagResponse is used to define fields on response body types.
type ResourceTagResponse struct {
	// ID is the unique id of the tag
	ID *uint `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of the tag
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// NewUpdateRatingRequestBody builds the HTTP request body from the payload of
// the "UpdateRating" endpoint of the "resource" service.
func NewUpdateRatingRequestBody(p *resource.UpdateRatingPayload) *UpdateRatingRequestBody {
	body := &UpdateRatingRequestBody{
		Rating: p.Rating,
	}
	return body
}

// NewAllResourceCollectionOK builds a "resource" service "All" endpoint result
// from a HTTP "OK" response.
func NewAllResourceCollectionOK(body AllResponseBody) resourceviews.ResourceCollectionView {
	v := make([]*resourceviews.ResourceView, len(body))
	for i, val := range body {
		v[i] = unmarshalResourceResponseToResourceviewsResourceView(val)
	}
	return v
}

// NewAllVersionsResourceOK builds a "resource" service "AllVersions" endpoint
// result from a HTTP "OK" response.
func NewAllVersionsResourceOK(body []*ResourceResponse) []*resource.Resource {
	v := make([]*resource.Resource, len(body))
	for i, val := range body {
		v[i] = unmarshalResourceResponseToResourceResource(val)
	}
	return v
}

// NewGetRatingResourceRatingOK builds a "resource" service "GetRating"
// endpoint result from a HTTP "OK" response.
func NewGetRatingResourceRatingOK(body *GetRatingResponseBody) *resource.ResourceRating {
	v := &resource.ResourceRating{
		Rating: *body.Rating,
	}

	return v
}

// ValidateGetRatingResponseBody runs the validations defined on
// GetRatingResponseBody
func ValidateGetRatingResponseBody(body *GetRatingResponseBody) (err error) {
	if body.Rating == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("rating", "body"))
	}
	if body.Rating != nil {
		if *body.Rating < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.rating", *body.Rating, 0, true))
		}
	}
	if body.Rating != nil {
		if *body.Rating > 5 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.rating", *body.Rating, 5, false))
		}
	}
	return
}

// ValidateResourceResponse runs the validations defined on ResourceResponse
func ValidateResourceResponse(body *ResourceResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Catalog == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("catalog", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.Versions == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("versions", "body"))
	}
	if body.Tags == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("tags", "body"))
	}
	if body.Rating == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("rating", "body"))
	}
	if body.LastUpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("last_updated_at", "body"))
	}
	if body.Catalog != nil {
		if err2 := ValidateCatalogResponse(body.Catalog); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	for _, e := range body.Versions {
		if e != nil {
			if err2 := ValidateResourceVersionResponse(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, e := range body.Tags {
		if e != nil {
			if err2 := ValidateResourceTagResponse(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.Rating != nil {
		if *body.Rating < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.rating", *body.Rating, 0, true))
		}
	}
	if body.Rating != nil {
		if *body.Rating > 5 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.rating", *body.Rating, 5, false))
		}
	}
	return
}

// ValidateCatalogResponse runs the validations defined on CatalogResponse
func ValidateCatalogResponse(body *CatalogResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	return
}

// ValidateResourceVersionResponse runs the validations defined on
// ResourceVersionResponse
func ValidateResourceVersionResponse(body *ResourceVersionResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Version == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("version", "body"))
	}
	return
}

// ValidateResourceTagResponse runs the validations defined on
// ResourceTagResponse
func ValidateResourceTagResponse(body *ResourceTagResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}
