// Code generated by goa v3.1.1, DO NOT EDIT.
//
// resource client HTTP transport
//
// Command:
// $ goa gen github.com/tektoncd/hub/api/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the resource service endpoint HTTP clients.
type Client struct {
	// All Doer is the HTTP client used to make requests to the All endpoint.
	AllDoer goahttp.Doer

	// AllVersions Doer is the HTTP client used to make requests to the AllVersions
	// endpoint.
	AllVersionsDoer goahttp.Doer

	// GetRating Doer is the HTTP client used to make requests to the GetRating
	// endpoint.
	GetRatingDoer goahttp.Doer

	// UpdateRating Doer is the HTTP client used to make requests to the
	// UpdateRating endpoint.
	UpdateRatingDoer goahttp.Doer

	// CORS Doer is the HTTP client used to make requests to the  endpoint.
	CORSDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the resource service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		AllDoer:             doer,
		AllVersionsDoer:     doer,
		GetRatingDoer:       doer,
		UpdateRatingDoer:    doer,
		CORSDoer:            doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
	}
}

// All returns an endpoint that makes HTTP requests to the resource service All
// server.
func (c *Client) All() goa.Endpoint {
	var (
		encodeRequest  = EncodeAllRequest(c.encoder)
		decodeResponse = DecodeAllResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildAllRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.AllDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("resource", "All", err)
		}
		return decodeResponse(resp)
	}
}

// AllVersions returns an endpoint that makes HTTP requests to the resource
// service AllVersions server.
func (c *Client) AllVersions() goa.Endpoint {
	var (
		decodeResponse = DecodeAllVersionsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildAllVersionsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.AllVersionsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("resource", "AllVersions", err)
		}
		return decodeResponse(resp)
	}
}

// GetRating returns an endpoint that makes HTTP requests to the resource
// service GetRating server.
func (c *Client) GetRating() goa.Endpoint {
	var (
		decodeResponse = DecodeGetRatingResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetRatingRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetRatingDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("resource", "GetRating", err)
		}
		return decodeResponse(resp)
	}
}

// UpdateRating returns an endpoint that makes HTTP requests to the resource
// service UpdateRating server.
func (c *Client) UpdateRating() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateRatingRequest(c.encoder)
		decodeResponse = DecodeUpdateRatingResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildUpdateRatingRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateRatingDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("resource", "UpdateRating", err)
		}
		return decodeResponse(resp)
	}
}
