// Code generated by goa v3.1.1, DO NOT EDIT.
//
// resource HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/tektoncd/hub/api/design

package server

import (
	"context"
	"io"
	"net/http"
	"strconv"

	resource "github.com/tektoncd/hub/api/gen/resource"
	resourceviews "github.com/tektoncd/hub/api/gen/resource/views"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeAllResponse returns an encoder for responses returned by the resource
// All endpoint.
func EncodeAllResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(resourceviews.ResourceCollection)
		enc := encoder(ctx, w)
		body := NewResourceResponseCollection(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeAllRequest returns a decoder for requests sent to the resource All
// endpoint.
func DecodeAllRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			limit uint
			err   error
		)
		{
			limitRaw := r.URL.Query().Get("limit")
			if limitRaw == "" {
				limit = 100
			} else {
				v, err2 := strconv.ParseUint(limitRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("limit", limitRaw, "unsigned integer"))
				}
				limit = uint(v)
			}
		}
		if err != nil {
			return nil, err
		}
		payload := NewAllPayload(limit)

		return payload, nil
	}
}

// EncodeAllVersionsResponse returns an encoder for responses returned by the
// resource AllVersions endpoint.
func EncodeAllVersionsResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.([]*resource.Resource)
		enc := encoder(ctx, w)
		body := NewAllVersionsResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeAllVersionsRequest returns a decoder for requests sent to the resource
// AllVersions endpoint.
func DecodeAllVersionsRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			resourceID uint
			err        error

			params = mux.Vars(r)
		)
		{
			resourceIDRaw := params["resourceID"]
			v, err2 := strconv.ParseUint(resourceIDRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("resourceID", resourceIDRaw, "unsigned integer"))
			}
			resourceID = uint(v)
		}
		if err != nil {
			return nil, err
		}
		payload := NewAllVersionsPayload(resourceID)

		return payload, nil
	}
}

// EncodeGetRatingResponse returns an encoder for responses returned by the
// resource GetRating endpoint.
func EncodeGetRatingResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*resource.ResourceRating)
		enc := encoder(ctx, w)
		body := NewGetRatingResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetRatingRequest returns a decoder for requests sent to the resource
// GetRating endpoint.
func DecodeGetRatingRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			resourceID uint
			err        error

			params = mux.Vars(r)
		)
		{
			resourceIDRaw := params["resourceID"]
			v, err2 := strconv.ParseUint(resourceIDRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("resourceID", resourceIDRaw, "unsigned integer"))
			}
			resourceID = uint(v)
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetRatingPayload(resourceID)

		return payload, nil
	}
}

// EncodeUpdateRatingResponse returns an encoder for responses returned by the
// resource UpdateRating endpoint.
func EncodeUpdateRatingResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeUpdateRatingRequest returns a decoder for requests sent to the
// resource UpdateRating endpoint.
func DecodeUpdateRatingRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body UpdateRatingRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateUpdateRatingRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			resourceID uint

			params = mux.Vars(r)
		)
		{
			resourceIDRaw := params["resourceID"]
			v, err2 := strconv.ParseUint(resourceIDRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("resourceID", resourceIDRaw, "unsigned integer"))
			}
			resourceID = uint(v)
		}
		if err != nil {
			return nil, err
		}
		payload := NewUpdateRatingPayload(&body, resourceID)

		return payload, nil
	}
}

// marshalResourceviewsResourceViewToResourceResponse builds a value of type
// *ResourceResponse from a value of type *resourceviews.ResourceView.
func marshalResourceviewsResourceViewToResourceResponse(v *resourceviews.ResourceView) *ResourceResponse {
	res := &ResourceResponse{
		ID:            *v.ID,
		Name:          *v.Name,
		Type:          *v.Type,
		Description:   *v.Description,
		Rating:        *v.Rating,
		LastUpdatedAt: *v.LastUpdatedAt,
	}
	if v.Catalog != nil {
		res.Catalog = marshalResourceviewsCatalogViewToCatalogResponse(v.Catalog)
	}
	if v.Versions != nil {
		res.Versions = make([]*ResourceVersionResponse, len(v.Versions))
		for i, val := range v.Versions {
			res.Versions[i] = marshalResourceviewsResourceVersionViewToResourceVersionResponse(val)
		}
	}
	if v.Tags != nil {
		res.Tags = make([]*Tag, len(v.Tags))
		for i, val := range v.Tags {
			res.Tags[i] = marshalResourceviewsTagToTag(val)
		}
	}

	return res
}

// marshalResourceviewsCatalogViewToCatalogResponse builds a value of type
// *CatalogResponse from a value of type *resourceviews.CatalogView.
func marshalResourceviewsCatalogViewToCatalogResponse(v *resourceviews.CatalogView) *CatalogResponse {
	res := &CatalogResponse{
		ID:   *v.ID,
		Type: *v.Type,
	}

	return res
}

// marshalResourceviewsResourceVersionViewToResourceVersionResponse builds a
// value of type *ResourceVersionResponse from a value of type
// *resourceviews.ResourceVersionView.
func marshalResourceviewsResourceVersionViewToResourceVersionResponse(v *resourceviews.ResourceVersionView) *ResourceVersionResponse {
	res := &ResourceVersionResponse{
		ID:      *v.ID,
		Version: *v.Version,
	}

	return res
}

// marshalResourceviewsTagToTag builds a value of type *Tag from a value of
// type *resourceviews.Tag.
func marshalResourceviewsTagToTag(v *resourceviews.Tag) *Tag {
	res := &Tag{
		ID:   *v.ID,
		Name: *v.Name,
	}

	return res
}

// marshalResourceResourceToResourceResponse builds a value of type
// *ResourceResponse from a value of type *resource.Resource.
func marshalResourceResourceToResourceResponse(v *resource.Resource) *ResourceResponse {
	res := &ResourceResponse{
		ID:            v.ID,
		Name:          v.Name,
		Type:          v.Type,
		Description:   v.Description,
		Rating:        v.Rating,
		LastUpdatedAt: v.LastUpdatedAt,
	}
	if v.Catalog != nil {
		res.Catalog = marshalResourceCatalogToCatalogResponse(v.Catalog)
	}
	if v.Versions != nil {
		res.Versions = make([]*ResourceVersionResponse, len(v.Versions))
		for i, val := range v.Versions {
			res.Versions[i] = marshalResourceResourceVersionToResourceVersionResponse(val)
		}
	}
	if v.Tags != nil {
		res.Tags = make([]*Tag, len(v.Tags))
		for i, val := range v.Tags {
			res.Tags[i] = marshalResourceTagToTag(val)
		}
	}

	return res
}

// marshalResourceCatalogToCatalogResponse builds a value of type
// *CatalogResponse from a value of type *resource.Catalog.
func marshalResourceCatalogToCatalogResponse(v *resource.Catalog) *CatalogResponse {
	res := &CatalogResponse{
		ID:   v.ID,
		Type: v.Type,
	}

	return res
}

// marshalResourceResourceVersionToResourceVersionResponse builds a value of
// type *ResourceVersionResponse from a value of type *resource.ResourceVersion.
func marshalResourceResourceVersionToResourceVersionResponse(v *resource.ResourceVersion) *ResourceVersionResponse {
	res := &ResourceVersionResponse{
		ID:      v.ID,
		Version: v.Version,
	}

	return res
}

// marshalResourceTagToTag builds a value of type *Tag from a value of type
// *resource.Tag.
func marshalResourceTagToTag(v *resource.Tag) *Tag {
	res := &Tag{
		ID:   v.ID,
		Name: v.Name,
	}

	return res
}
