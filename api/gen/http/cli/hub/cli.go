// Code generated by goa v3.1.1, DO NOT EDIT.
//
// hub HTTP client CLI support package
//
// Command:
// $ goa gen github.com/tektoncd/hub/api/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	categoryc "github.com/tektoncd/hub/api/gen/http/category/client"
	resourcec "github.com/tektoncd/hub/api/gen/http/resource/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `resource (all|all-versions|get-rating|update-rating)
category categories
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` resource all --limit 9419416571244238326` + "\n" +
		os.Args[0] + ` category categories` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		resourceFlags = flag.NewFlagSet("resource", flag.ContinueOnError)

		resourceAllFlags     = flag.NewFlagSet("all", flag.ExitOnError)
		resourceAllLimitFlag = resourceAllFlags.String("limit", "100", "")

		resourceAllVersionsFlags          = flag.NewFlagSet("all-versions", flag.ExitOnError)
		resourceAllVersionsResourceIDFlag = resourceAllVersionsFlags.String("resource-id", "REQUIRED", "Id of the Resource")

		resourceGetRatingFlags          = flag.NewFlagSet("get-rating", flag.ExitOnError)
		resourceGetRatingResourceIDFlag = resourceGetRatingFlags.String("resource-id", "REQUIRED", "Id of the Resource")

		resourceUpdateRatingFlags          = flag.NewFlagSet("update-rating", flag.ExitOnError)
		resourceUpdateRatingBodyFlag       = resourceUpdateRatingFlags.String("body", "REQUIRED", "")
		resourceUpdateRatingResourceIDFlag = resourceUpdateRatingFlags.String("resource-id", "REQUIRED", "Id of the Resource")

		categoryFlags = flag.NewFlagSet("category", flag.ContinueOnError)

		categoryCategoriesFlags = flag.NewFlagSet("categories", flag.ExitOnError)
	)
	resourceFlags.Usage = resourceUsage
	resourceAllFlags.Usage = resourceAllUsage
	resourceAllVersionsFlags.Usage = resourceAllVersionsUsage
	resourceGetRatingFlags.Usage = resourceGetRatingUsage
	resourceUpdateRatingFlags.Usage = resourceUpdateRatingUsage

	categoryFlags.Usage = categoryUsage
	categoryCategoriesFlags.Usage = categoryCategoriesUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "resource":
			svcf = resourceFlags
		case "category":
			svcf = categoryFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "resource":
			switch epn {
			case "all":
				epf = resourceAllFlags

			case "all-versions":
				epf = resourceAllVersionsFlags

			case "get-rating":
				epf = resourceGetRatingFlags

			case "update-rating":
				epf = resourceUpdateRatingFlags

			}

		case "category":
			switch epn {
			case "categories":
				epf = categoryCategoriesFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "resource":
			c := resourcec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "all":
				endpoint = c.All()
				data, err = resourcec.BuildAllPayload(*resourceAllLimitFlag)
			case "all-versions":
				endpoint = c.AllVersions()
				data, err = resourcec.BuildAllVersionsPayload(*resourceAllVersionsResourceIDFlag)
			case "get-rating":
				endpoint = c.GetRating()
				data, err = resourcec.BuildGetRatingPayload(*resourceGetRatingResourceIDFlag)
			case "update-rating":
				endpoint = c.UpdateRating()
				data, err = resourcec.BuildUpdateRatingPayload(*resourceUpdateRatingBodyFlag, *resourceUpdateRatingResourceIDFlag)
			}
		case "category":
			c := categoryc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "categories":
				endpoint = c.Categories()
				data = nil
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// resourceUsage displays the usage of the resource command and its subcommands.
func resourceUsage() {
	fmt.Fprintf(os.Stderr, `The resource service gives resource details
Usage:
    %s [globalflags] resource COMMAND [flags]

COMMAND:
    all: Get all tasks and pipelines.
    all-versions: Get all versions of a resource
    get-rating: Get User's rating of a resource
    update-rating: Update User's rating of a resource

Additional help:
    %s resource COMMAND --help
`, os.Args[0], os.Args[0])
}
func resourceAllUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] resource all -limit UINT

Get all tasks and pipelines.
    -limit UINT: 

Example:
    `+os.Args[0]+` resource all --limit 9419416571244238326
`, os.Args[0])
}

func resourceAllVersionsUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] resource all-versions -resource-id UINT

Get all versions of a resource
    -resource-id UINT: Id of the Resource

Example:
    `+os.Args[0]+` resource all-versions --resource-id 8023022838646083792
`, os.Args[0])
}

func resourceGetRatingUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] resource get-rating -resource-id UINT

Get User's rating of a resource
    -resource-id UINT: Id of the Resource

Example:
    `+os.Args[0]+` resource get-rating --resource-id 7583277825226825956
`, os.Args[0])
}

func resourceUpdateRatingUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] resource update-rating -body JSON -resource-id UINT

Update User's rating of a resource
    -body JSON: 
    -resource-id UINT: Id of the Resource

Example:
    `+os.Args[0]+` resource update-rating --body '{
      "rating": 364697698949290656
   }' --resource-id 16221622227908616570
`, os.Args[0])
}

// categoryUsage displays the usage of the category command and its subcommands.
func categoryUsage() {
	fmt.Fprintf(os.Stderr, `The category service gives categories details
Usage:
    %s [globalflags] category COMMAND [flags]

COMMAND:
    categories: Get all Categories with their associated tags.

Additional help:
    %s category COMMAND --help
`, os.Args[0], os.Args[0])
}
func categoryCategoriesUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] category categories

Get all Categories with their associated tags.

Example:
    `+os.Args[0]+` category categories
`, os.Args[0])
}
