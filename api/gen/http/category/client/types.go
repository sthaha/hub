// Code generated by goa v3.1.1, DO NOT EDIT.
//
// category HTTP client types
//
// Command:
// $ goa gen github.com/tektoncd/hub/api/design

package client

import (
	category "github.com/tektoncd/hub/api/gen/category"
	goa "goa.design/goa/v3/pkg"
)

// CategoriesResponseBody is the type of the "category" service "Categories"
// endpoint HTTP response body.
type CategoriesResponseBody struct {
	Data   []*CategoryResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	Errors []string                `form:"errors,omitempty" json:"errors,omitempty" xml:"errors,omitempty"`
}

// CategoryResponseBody is used to define fields on response body types.
type CategoryResponseBody struct {
	// ID is the unique id of the category
	ID *uint `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of the Category
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Tags associated with the category
	Tags []*Tag `form:"tags,omitempty" json:"tags,omitempty" xml:"tags,omitempty"`
}

// Tag is used to define fields on response body types.
type Tag struct {
	// ID is the unique id of the tag
	ID *uint `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of the tag
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// NewCategoriesResultOK builds a "category" service "Categories" endpoint
// result from a HTTP "OK" response.
func NewCategoriesResultOK(body *CategoriesResponseBody) *category.CategoriesResult {
	v := &category.CategoriesResult{}
	if body.Data != nil {
		v.Data = make([]*category.Category, len(body.Data))
		for i, val := range body.Data {
			v.Data[i] = unmarshalCategoryResponseBodyToCategoryCategory(val)
		}
	}
	if body.Errors != nil {
		v.Errors = make([]string, len(body.Errors))
		for i, val := range body.Errors {
			v.Errors[i] = val
		}
	}

	return v
}

// ValidateCategoriesResponseBody runs the validations defined on
// CategoriesResponseBody
func ValidateCategoriesResponseBody(body *CategoriesResponseBody) (err error) {
	for _, e := range body.Data {
		if e != nil {
			if err2 := ValidateCategoryResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateCategoryResponseBody runs the validations defined on
// CategoryResponseBody
func ValidateCategoryResponseBody(body *CategoryResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Tags == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("tags", "body"))
	}
	for _, e := range body.Tags {
		if e != nil {
			if err2 := ValidateTag(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateTag runs the validations defined on Tag
func ValidateTag(body *Tag) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}
