// Code generated by goa v3.1.1, DO NOT EDIT.
//
// category HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/tektoncd/hub/api/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	category "github.com/tektoncd/hub/api/gen/category"
	goahttp "goa.design/goa/v3/http"
)

// BuildCategoriesRequest instantiates a HTTP request object with method and
// path set to call the "category" service "Categories" endpoint
func (c *Client) BuildCategoriesRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CategoriesCategoryPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("category", "Categories", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeCategoriesResponse returns a decoder for responses returned by the
// category Categories endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeCategoriesResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body CategoriesResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("category", "Categories", err)
			}
			err = ValidateCategoriesResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("category", "Categories", err)
			}
			res := NewCategoriesResultOK(&body)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("category", "Categories", resp.StatusCode, string(body))
		}
	}
}

// unmarshalCategoryResponseBodyToCategoryCategory builds a value of type
// *category.Category from a value of type *CategoryResponseBody.
func unmarshalCategoryResponseBodyToCategoryCategory(v *CategoryResponseBody) *category.Category {
	if v == nil {
		return nil
	}
	res := &category.Category{
		ID:   *v.ID,
		Name: *v.Name,
	}
	res.Tags = make([]*category.Tag, len(v.Tags))
	for i, val := range v.Tags {
		res.Tags[i] = unmarshalTagToCategoryTag(val)
	}

	return res
}

// unmarshalTagToCategoryTag builds a value of type *category.Tag from a value
// of type *Tag.
func unmarshalTagToCategoryTag(v *Tag) *category.Tag {
	res := &category.Tag{
		ID:   *v.ID,
		Name: *v.Name,
	}

	return res
}
